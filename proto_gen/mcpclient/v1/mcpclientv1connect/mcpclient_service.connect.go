// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mcpclient/v1/mcpclient_service.proto

package mcpclientv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/darwishdev/mcp-client-api/proto_gen/mcpclient/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// McpClientServiceName is the fully-qualified name of the McpClientService service.
	McpClientServiceName = "mcpclient.v1.McpClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// McpClientServiceSendMessageProcedure is the fully-qualified name of the McpClientService's
	// SendMessage RPC.
	McpClientServiceSendMessageProcedure = "/mcpclient.v1.McpClientService/SendMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mcpClientServiceServiceDescriptor           = v1.File_mcpclient_v1_mcpclient_service_proto.Services().ByName("McpClientService")
	mcpClientServiceSendMessageMethodDescriptor = mcpClientServiceServiceDescriptor.Methods().ByName("SendMessage")
)

// McpClientServiceClient is a client for the mcpclient.v1.McpClientService service.
type McpClientServiceClient interface {
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.ServerStreamForClient[v1.SendMessageResponse], error)
}

// NewMcpClientServiceClient constructs a client for the mcpclient.v1.McpClientService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMcpClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) McpClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mcpClientServiceClient{
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+McpClientServiceSendMessageProcedure,
			connect.WithSchema(mcpClientServiceSendMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mcpClientServiceClient implements McpClientServiceClient.
type mcpClientServiceClient struct {
	sendMessage *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
}

// SendMessage calls mcpclient.v1.McpClientService.SendMessage.
func (c *mcpClientServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.ServerStreamForClient[v1.SendMessageResponse], error) {
	return c.sendMessage.CallServerStream(ctx, req)
}

// McpClientServiceHandler is an implementation of the mcpclient.v1.McpClientService service.
type McpClientServiceHandler interface {
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest], *connect.ServerStream[v1.SendMessageResponse]) error
}

// NewMcpClientServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMcpClientServiceHandler(svc McpClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mcpClientServiceSendMessageHandler := connect.NewServerStreamHandler(
		McpClientServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(mcpClientServiceSendMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcpclient.v1.McpClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case McpClientServiceSendMessageProcedure:
			mcpClientServiceSendMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMcpClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMcpClientServiceHandler struct{}

func (UnimplementedMcpClientServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest], *connect.ServerStream[v1.SendMessageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mcpclient.v1.McpClientService.SendMessage is not implemented"))
}
